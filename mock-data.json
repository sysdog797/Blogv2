[
  {
    "url": "https://api.github.com/repos/sysdog797/syscoding/issues/7",
    "repository_url": "https://api.github.com/repos/sysdog797/syscoding",
    "labels_url": "https://api.github.com/repos/sysdog797/syscoding/issues/7/labels{/name}",
    "comments_url": "https://api.github.com/repos/sysdog797/syscoding/issues/7/comments",
    "events_url": "https://api.github.com/repos/sysdog797/syscoding/issues/7/events",
    "html_url": "https://github.com/sysdog797/syscoding/issues/7",
    "id": 332653945,
    "node_id": "MDU6SXNzdWUzMzI2NTM5NDU=",
    "number": 7,
    "title": "Vue组件的data必须是函数",
    "user": {
      "login": "sysdog797",
      "id": 21992482,
      "node_id": "MDQ6VXNlcjIxOTkyNDgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21992482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sysdog797",
      "html_url": "https://github.com/sysdog797",
      "followers_url": "https://api.github.com/users/sysdog797/followers",
      "following_url": "https://api.github.com/users/sysdog797/following{/other_user}",
      "gists_url": "https://api.github.com/users/sysdog797/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sysdog797/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sysdog797/subscriptions",
      "organizations_url": "https://api.github.com/users/sysdog797/orgs",
      "repos_url": "https://api.github.com/users/sysdog797/repos",
      "events_url": "https://api.github.com/users/sysdog797/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sysdog797/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 913461744,
        "node_id": "MDU6TGFiZWw5MTM0NjE3NDQ=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/Vue.js",
        "name": "Vue.js",
        "color": "008672",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-06-15T05:52:22Z",
    "updated_at": "2018-06-15T06:09:40Z",
    "closed_at": null,
    "author_association": "OWNER",
    "body": "在创建或注册模板的时候，传入一个data属性作为用来绑定的数据。但是在组件中，data必须是一个函数，而不能直接把一个对象赋值给它。\r\n```javascript\r\nVue.component('my-component', {\r\n  template: '<div>OK</div>',\r\n  data() {\r\n    return {} // 返回一个唯一的对象，不要和其他组件共用一个对象进行返回\r\n  },\r\n})\r\n```\r\n然而在new Vue()的时候，是可以给data直接赋值为一个对象的。Why？\r\n其实，上面这个操作是一个简易操作，实际上，它首先需要创建一个组件构造器，然后注册组件。注册组件的本质其实就是建立一个组件构造器的引用。使用组件才是真正创建一个组件实例。所以，注册组件其实并不产生新的组件类，但会产生一个可以用来实例化的新方式。\r\nSo，理解这点之后，再理解js的原型链：\r\n```javascript\r\nvar MyComponent = function() {}\r\nMyComponent.prototype.data = {\r\n  a: 1,\r\n  b: 2,\r\n}\r\n// 上面是一个虚拟的组件构造器，真实的组件构造器方法很多\r\n\r\nvar component1 = new MyComponent()\r\nvar component2 = new MyComponent()\r\n// 上面实例化出来两个组件实例，也就是通过<my-component>调用，创建的两个实例\r\n\r\ncomponent1.data.a === component2.data.a // true\r\ncomponent1.data.b = 5\r\ncomponent2.data.b // 5\r\n```\r\n可以看到上面代码中最后三句，这就比较坑爹了，如果两个实例同时引用一个对象，那么当你修改其中一个属性的时候，另外一个实例也会跟着改。这怎么可以，两个实例应该有自己各自的域才对。所以，需要通过下面方法来进行处理：\r\n```javascript\r\nvar MyComponent = function() {\r\n  this.data = this.data()\r\n}\r\nMyComponent.prototype.data = function() {\r\n  return {\r\n    a: 1,\r\n    b: 2,\r\n  }\r\n}\r\n```\r\n这样每一个实例的data属性都是独立的，不会相互影响了。所以，你现在知道为什么vue组件的data必须是函数了吧。这都是因为js本身的特性带来的，跟vue本身设计无关。其实vue不应该把这个方法名取为data()，应该叫setData或其他更容易立即的方法名。"
  },
  {
    "url": "https://api.github.com/repos/sysdog797/syscoding/issues/6",
    "repository_url": "https://api.github.com/repos/sysdog797/syscoding",
    "labels_url": "https://api.github.com/repos/sysdog797/syscoding/issues/6/labels{/name}",
    "comments_url": "https://api.github.com/repos/sysdog797/syscoding/issues/6/comments",
    "events_url": "https://api.github.com/repos/sysdog797/syscoding/issues/6/events",
    "html_url": "https://github.com/sysdog797/syscoding/issues/6",
    "id": 331053864,
    "node_id": "MDU6SXNzdWUzMzEwNTM4NjQ=",
    "number": 6,
    "title": "项目再搭建：Vue-cli之simple-webpack模式",
    "user": {
      "login": "sysdog797",
      "id": 21992482,
      "node_id": "MDQ6VXNlcjIxOTkyNDgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21992482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sysdog797",
      "html_url": "https://github.com/sysdog797",
      "followers_url": "https://api.github.com/users/sysdog797/followers",
      "following_url": "https://api.github.com/users/sysdog797/following{/other_user}",
      "gists_url": "https://api.github.com/users/sysdog797/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sysdog797/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sysdog797/subscriptions",
      "organizations_url": "https://api.github.com/users/sysdog797/orgs",
      "repos_url": "https://api.github.com/users/sysdog797/repos",
      "events_url": "https://api.github.com/users/sysdog797/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sysdog797/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 913461744,
        "node_id": "MDU6TGFiZWw5MTM0NjE3NDQ=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/Vue.js",
        "name": "Vue.js",
        "color": "008672",
        "default": false
      },
      {
        "id": 965645655,
        "node_id": "MDU6TGFiZWw5NjU2NDU2NTU=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/webpack",
        "name": "webpack",
        "color": "bfdadc",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-06-11T05:53:16Z",
    "updated_at": "2018-06-15T09:31:34Z",
    "closed_at": null,
    "author_association": "OWNER",
    "body": "### Vue-cli simple-webpack\r\n由于第一版博客实在是写的太low，近期直接推翻重来。依然是用vue-cli进行项目搭建，这一次用的simple-webpack模式。\r\n```javascript\r\n// 配置方法\r\nvue init webpack-simple my-project\r\n````\r\n这种模式的好处在于，构建出来的项目很轻，只包含了基本的vue-loader和webpack配置（当然基本的热重载和build功能）。\r\n### Vue-resource的位置\r\n```javascript\r\nimport Vue from 'vue'\r\nimport App from './App.vue'\r\nimport VueResource from 'vue-resource'\r\n\r\nVue.use(VueResource); // 一定要放在这里\r\n\r\nnew Vue({\r\n    el: '#app',\r\n    render: h => h(App)\r\n})\r\n```\r\n### Webpack常用插件\r\n在vue-cli的simple-webpack模式中，webpack配置默认没有使用任何插件的，所有的插件都需要我们自己配置，这也能够让我们能更深刻的了解它的配置。\r\n#### html-webpack-plugin\r\n初始环境下，使用`npm run build`打包出来的是一个个js文件（默认为bundle.js），要想打包出来是一个html文件和js文件就需要用到这个插件了。\r\n```javascript\r\n// 下面是伪码（下同）\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\n\r\nplugins: [\r\n    new HtmlWebpackPlugin({\r\n      filename: 'index.html',   // 生成的html存放路径，相对于publicPath\r\n      inject: 'body',                // js放在body元素底部\r\n      template: 'index.html'  // html模板路径\r\n    }),\r\n    ...\r\n]\r\n```\r\n#### extract-text-webpack-plugin\r\n用于分离出css文件，配置相对简单\r\n```javascript\r\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\r\n\r\nmodule: {\r\n    rules: [{\r\n        test: /\\.vue$/,\r\n        loader: 'vue-loader',\r\n        options: {\r\n          loaders: {\r\n          },\r\n          extractCSS: true\r\n          // other vue-loader options go here\r\n        }\r\n      },\r\n      ...\r\n    ],\r\n    plugins:[\r\n        new ExtractTextPlugin(\"static/css/[name].css\"),\r\n        ...\r\n    ]\r\n}\r\n```\r\n#### copy-webpack-plugin\r\n打包文件的时候，通常会有一些静态文件（如reset.css、icon图片资源等）需要一并被打包到build出来的dist文件夹中，这时就会用上这个copy的插件了。\r\n```javascript\r\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\r\n\r\nplugins:[\r\n    new CopyWebpackPlugin([{\r\n        from: path.resolve(__dirname, './src/static'),\r\n        to: 'static'\r\n    }]),\r\n    ...\r\n]\r\n```"
  },
  {
    "url": "https://api.github.com/repos/sysdog797/syscoding/issues/5",
    "repository_url": "https://api.github.com/repos/sysdog797/syscoding",
    "labels_url": "https://api.github.com/repos/sysdog797/syscoding/issues/5/labels{/name}",
    "comments_url": "https://api.github.com/repos/sysdog797/syscoding/issues/5/comments",
    "events_url": "https://api.github.com/repos/sysdog797/syscoding/issues/5/events",
    "html_url": "https://github.com/sysdog797/syscoding/issues/5",
    "id": 331041921,
    "node_id": "MDU6SXNzdWUzMzEwNDE5MjE=",
    "number": 5,
    "title": "使用React一个月的感受（我又来对比Vue了）",
    "user": {
      "login": "sysdog797",
      "id": 21992482,
      "node_id": "MDQ6VXNlcjIxOTkyNDgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21992482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sysdog797",
      "html_url": "https://github.com/sysdog797",
      "followers_url": "https://api.github.com/users/sysdog797/followers",
      "following_url": "https://api.github.com/users/sysdog797/following{/other_user}",
      "gists_url": "https://api.github.com/users/sysdog797/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sysdog797/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sysdog797/subscriptions",
      "organizations_url": "https://api.github.com/users/sysdog797/orgs",
      "repos_url": "https://api.github.com/users/sysdog797/repos",
      "events_url": "https://api.github.com/users/sysdog797/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sysdog797/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 965475927,
        "node_id": "MDU6TGFiZWw5NjU0NzU5Mjc=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/React",
        "name": "React",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 913461744,
        "node_id": "MDU6TGFiZWw5MTM0NjE3NDQ=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/Vue.js",
        "name": "Vue.js",
        "color": "008672",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-06-11T04:29:35Z",
    "updated_at": "2018-06-15T09:31:56Z",
    "closed_at": null,
    "author_association": "OWNER",
    "body": "### 依然是数据更新方式\r\n上篇文章也说到过React通过state同一管理到数据，并通过`this.setState()`更新（而且dom是异步更新的！）；而Vue可以直接改变实例中相对应的数值，并且刷新dom。\r\n### v-if和v-show是真的好用\r\nReact中，需要通过模板字符串或者if语句进行一些数据的判断，从而控制dom的显示隐藏。下面是一些例子：\r\n```javascript\r\n// 情况一\r\nlet dom;\r\nif(this.state.data){\r\n    dom = <div></div>;\r\n}else{\r\n    dom = '';\r\n}\r\n// 情况二\r\n<div className={`init-class${tihs.state.data ? '' : ' hide'}`}></div>  //注意这里的空格\r\n```\r\n反观vue里面直接用v-if或者v-show来控制即可2333。\r\n这里需要注意：v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。\r\n```javascript\r\n<div v-show=\"data\" class=\"init-class\"></div>\r\n```\r\n### &lt;transition&gt;\r\nVue中使用<transition>来控制一些过渡特效是一个神器，特别是结合v-show来写一些渐隐渐现的效果非常好用。搬运一个例子：\r\n```javascript\r\n<div id=\"demo\">\r\n  <button v-on:click=\"show = !show\">\r\n    Toggle\r\n  </button>\r\n  <transition name=\"fade\">\r\n    <p v-if=\"show\">hello</p>\r\n  </transition>\r\n</div>\r\n```\r\n```css\r\n.fade-enter-active, .fade-leave-active {\r\n  transition: opacity .5s;\r\n}\r\n.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\r\n  opacity: 0;\r\n}\r\n```\r\n在React生态里面有类似的插件，实现类似的动画[react-transition-group](https://github.com/reactjs/react-transition-group)，这个还是比较好用的，除了在处理元素隐藏显示的时候显得力不从心，这就显示处vue把动画和v-show结合在一起的好处了。\r\n<br>\r\n说了那么多React的“坏话”，其实React在也有自己的优势，在构建大型应用时其数据状态管理的透明度和可测试性、可维护性至关重要，更重要的优势是React生态中还有适用于Web端和原生APP的框架——React Native。\r\n如果是单页应用数据相对不复杂的场景中，还是建议使用Vue作为框架来开发。（初级前端的个人观点...）"
  },
  {
    "url": "https://api.github.com/repos/sysdog797/syscoding/issues/4",
    "repository_url": "https://api.github.com/repos/sysdog797/syscoding",
    "labels_url": "https://api.github.com/repos/sysdog797/syscoding/issues/4/labels{/name}",
    "comments_url": "https://api.github.com/repos/sysdog797/syscoding/issues/4/comments",
    "events_url": "https://api.github.com/repos/sysdog797/syscoding/issues/4/events",
    "html_url": "https://github.com/sysdog797/syscoding/issues/4",
    "id": 322190284,
    "node_id": "MDU6SXNzdWUzMjIxOTAyODQ=",
    "number": 4,
    "title": "React 使用初步感受（对比 Vue）",
    "user": {
      "login": "sysdog797",
      "id": 21992482,
      "node_id": "MDQ6VXNlcjIxOTkyNDgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21992482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sysdog797",
      "html_url": "https://github.com/sysdog797",
      "followers_url": "https://api.github.com/users/sysdog797/followers",
      "following_url": "https://api.github.com/users/sysdog797/following{/other_user}",
      "gists_url": "https://api.github.com/users/sysdog797/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sysdog797/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sysdog797/subscriptions",
      "organizations_url": "https://api.github.com/users/sysdog797/orgs",
      "repos_url": "https://api.github.com/users/sysdog797/repos",
      "events_url": "https://api.github.com/users/sysdog797/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sysdog797/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 965475927,
        "node_id": "MDU6TGFiZWw5NjU0NzU5Mjc=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/React",
        "name": "React",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 913461744,
        "node_id": "MDU6TGFiZWw5MTM0NjE3NDQ=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/Vue.js",
        "name": "Vue.js",
        "color": "008672",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-05-11T07:05:07Z",
    "updated_at": "2018-06-15T09:32:08Z",
    "closed_at": null,
    "author_association": "OWNER",
    "body": "### 更新数据\r\nVue 和 React 组件内的 **this** 指向的都是组件的实例，它们都可以通过修改实例数据来更新页面。区别在于，Vue 中的 **this** 没有提供 **state** / **props** / **setState** API，不论是父组件传入的数据还是子组件的数据，都在同一个 **this** 的作用域下（这样业务代码会更短一些）。并且，Vue 也没有 **setState** 这样的 **setter** 方法来更新数据，直接通过全量赋值 this.xxx = yyy 数据的方式就可以更新 DOM 了。\r\n<br>\r\nReact 和 Vue 的设计区别，在更新数据的 API 中可以得到体现。Vue 的依赖追踪 Hack 了对象的 **setter**，因此在执行简单的赋值操作时可以直接获知状态树中的修改位置，但 DOM 更新是异步的。因此在 Vue 中如下的代码是没有问题的：\r\n```javascript\r\nthis.hasData = true\r\n// 数据状态同步更改，但 v-if=\"hasData\" 的元素还没有出现\r\nthis.hasData === true\r\n```\r\n需要显式 **setState** 的 React 则不能从基础的赋值操作中获知变更内容，而是需要通过 **setState** 触发一次 **render**，而后在 **render** 中更新 DOM 状态。因此这是一个容易踩的坑：\r\n```javascript\r\nthis.setState({ hasData: true })\r\n// 这里有问题，必须在 setState 回调中数据状态才得到更改\r\nthis.hasData === true\r\n```\r\nReact 中 DOM 状态和数据状态都是异步更新的。Vue 中仅 DOM 状态异步更新，需要保证 DOM 状态正确更新时，所使用的 **Vue.nextTick()** API 实际上也类似于 React 的 **setState** 回调。\r\n### setState()\r\n[官网解释](https://doc.react-china.org/docs/state-and-lifecycle.html#%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0%E5%8F%AF%E8%83%BD%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84)：并**不能保证**this.state会被立即更新，因此在调用这个方法之后访问this.state**可能**会得到的是之前的值。**不能保证**调用setState之后会同步运行，因为它们可能被批量更新，你可以提供可选的回调函数，在setState真正地完成了之后，回调函数将会被执行。各种不保证、可能...\r\n你会发现，下面的情况不会出现：\r\n```javascript\r\n// 假设 state.count === 0\r\nthis.setState({count: state.count + 1});\r\nthis.setState({count: state.count + 1});\r\nthis.setState({count: state.count + 1});\r\n// state.count === 1, 而不是 3\r\n```\r\n要解决这个问题可以像下面这么做：即使用setState() 的第二种形式 —— 以一个函数而不是对象作为参数，此函数的第一个参数是前一刻的 state，第二个参数是 state 更新执行瞬间的 props\r\n```javascript\r\n// 正确用法\r\nthis.setState((prevState, props) => ({\r\n  count: prevState.count + props.increment\r\n}));\r\n```\r\n当然了 **setState(nextState, callback)** 中的回调里面是更新后的state，可以在这里取到最新的值。一个小例子：\r\n```javascript\r\n//1.设置代码\r\nthis.setState({\r\n   myState: 'test'\r\n   }, function() {\r\n     // stateFunction是需要立即用到\r\n     this.stateFunction()\r\n   })\r\n\r\n//2.在函数中直接调用\r\nstateFunction() {\r\n   console.log('myState value is :', this.state.myState)\r\n}\r\n```\r\n或者采用更直接的方法，用 **setTimeout** 也可以获取到最新的state值：\r\n```javascript\r\nthis.setState({\r\n  myVal: 'test'\r\n})\r\nsetTimeout(() => {\r\n  console.log(this.myVal);\r\n},0)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/sysdog797/syscoding/issues/3",
    "repository_url": "https://api.github.com/repos/sysdog797/syscoding",
    "labels_url": "https://api.github.com/repos/sysdog797/syscoding/issues/3/labels{/name}",
    "comments_url": "https://api.github.com/repos/sysdog797/syscoding/issues/3/comments",
    "events_url": "https://api.github.com/repos/sysdog797/syscoding/issues/3/events",
    "html_url": "https://github.com/sysdog797/syscoding/issues/3",
    "id": 322181722,
    "node_id": "MDU6SXNzdWUzMjIxODE3MjI=",
    "number": 3,
    "title": "React 事件冒泡的秘密",
    "user": {
      "login": "sysdog797",
      "id": 21992482,
      "node_id": "MDQ6VXNlcjIxOTkyNDgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21992482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sysdog797",
      "html_url": "https://github.com/sysdog797",
      "followers_url": "https://api.github.com/users/sysdog797/followers",
      "following_url": "https://api.github.com/users/sysdog797/following{/other_user}",
      "gists_url": "https://api.github.com/users/sysdog797/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sysdog797/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sysdog797/subscriptions",
      "organizations_url": "https://api.github.com/users/sysdog797/orgs",
      "repos_url": "https://api.github.com/users/sysdog797/repos",
      "events_url": "https://api.github.com/users/sysdog797/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sysdog797/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 965475927,
        "node_id": "MDU6TGFiZWw5NjU0NzU5Mjc=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/React",
        "name": "React",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-05-11T06:24:01Z",
    "updated_at": "2018-06-15T09:32:21Z",
    "closed_at": null,
    "author_association": "OWNER",
    "body": "业务中经常会有需求，需要由事件冒泡来解决，最近看代码的时候遇到一个业务Bug，就是在React中阻止事件冒泡造成的，这里就记录一下解决方法。\r\n\r\n------\r\n\r\n### React 中合成事件和原生事件的区别\r\n\r\n合成事件：JSX中绑定的事件。\r\n```html\r\n<a ref=\"aaa\" onClick={(e)=>this.handleClick(e)}>更新</a>\r\n```\r\n原生事件：通过js原生代码绑定的事件。\r\n```javascript\r\ndocument.body.addEventListener('click',e=>{\r\n    console.log('body');\r\n})\r\n\r\nthis.refs.update.addEventListener('click',e=>{\r\n    console.log('update');\r\n});\r\n```\r\n\r\n### stopPropagation 与 stopImmediatePropagation\r\n\r\nstopImmediatePropagation的定义在[这里](https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopImmediatePropagation)，那么他和stopPropagation的区别是什么呢..\r\n>* stopPropagation 能够阻止事件的进一步捕获或者冒泡。\r\n>* 假设事件流已经被某个元素捕获（或者冒泡到某个元素），那么便会触发此元素上绑定的事件。如果绑定的事件不止一个，则依次触发。假如想中断这种依次触发，可以调用 e.stopImmediatePropagation。\r\n\r\n如果是React组件中的合成事件，那么stopPropagation就可以阻止事件的进一步冒泡，但是React中如果是合成事件和document之间的冒泡stopPropagation就不起效果。\r\n\r\n### React 模拟 DOM 事件冒泡机制\r\n观察下面这个例子：([参考资料](https://github.com/youngwind/blog/issues/107))\r\n\r\n![pic1](https://user-images.githubusercontent.com/8401872/28257006-08cc350c-6afa-11e7-90a3-c32a055cd991.gif)\r\n\r\n看上去和Dom中冒泡的效果一样，但是我们都知道“React 组件绑定事件本质上是代理到 document 上”。也就是说，只有当事件流冒泡到 document 上时，才会依次触发 document 上绑定的两个事件。\r\n事实并非#child 和 #parent 的事件分别代理到 document 上，而是 React 在 document 上绑定了一个 dispatchEvent 函数（至于这个函数怎么实现的，这里先深入...），在执行 dispatchEvent 的过程中，其内部会依次执行 #child 和 #parent 上绑定的事件。\r\n\r\n------\r\n\r\n再看下面这个例子：\r\n![pic2](https://user-images.githubusercontent.com/8401872/28257363-c2ffc11c-6afc-11e7-963d-3d391652db34.gif)\r\n我们可以分析出：\r\n>* 事件流首先进入到 #child ，然后触发直接绑定在 #child 上的事件；\r\n>* 事件流沿着 DOM 结构向上冒泡到 document，触发 React 绑定的 dispatchEvent 函数，从而调用了 #child 子元素上绑定的 clickChild 方法。\r\n>* 在 clickChild 方法的最后，我调用了 e.stopPropagation，成功地阻止了 React 模拟的事件冒泡，因此，成功地没有触发 #parent 上的事件。\r\n>* 然后，最后出现了问题，还是触发了 document 上的事件。\r\n\r\n所以这个时候stopPropagation就不管用了，需要用到stopImmediatePropagation。在React中，这里是e.nativeEvent.stopImmediatePropagation()\r\n看下面这个流程图会更清楚些：\r\n![pic3](https://user-images.githubusercontent.com/8401872/28257456-8a4868b4-6afd-11e7-8cb0-8d35f272e27d.png)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/sysdog797/syscoding/issues/2",
    "repository_url": "https://api.github.com/repos/sysdog797/syscoding",
    "labels_url": "https://api.github.com/repos/sysdog797/syscoding/issues/2/labels{/name}",
    "comments_url": "https://api.github.com/repos/sysdog797/syscoding/issues/2/comments",
    "events_url": "https://api.github.com/repos/sysdog797/syscoding/issues/2/events",
    "html_url": "https://github.com/sysdog797/syscoding/issues/2",
    "id": 318044774,
    "node_id": "MDU6SXNzdWUzMTgwNDQ3NzQ=",
    "number": 2,
    "title": "Markdown 处理方案：remarkable 和 highlight",
    "user": {
      "login": "sysdog797",
      "id": 21992482,
      "node_id": "MDQ6VXNlcjIxOTkyNDgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21992482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sysdog797",
      "html_url": "https://github.com/sysdog797",
      "followers_url": "https://api.github.com/users/sysdog797/followers",
      "following_url": "https://api.github.com/users/sysdog797/following{/other_user}",
      "gists_url": "https://api.github.com/users/sysdog797/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sysdog797/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sysdog797/subscriptions",
      "organizations_url": "https://api.github.com/users/sysdog797/orgs",
      "repos_url": "https://api.github.com/users/sysdog797/repos",
      "events_url": "https://api.github.com/users/sysdog797/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sysdog797/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 965476316,
        "node_id": "MDU6TGFiZWw5NjU0NzYzMTY=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/Markdown",
        "name": "Markdown",
        "color": "6ab510",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-04-26T14:04:05Z",
    "updated_at": "2018-06-15T09:32:35Z",
    "closed_at": null,
    "author_association": "OWNER",
    "body": "## Remarkable\r\n\r\n从github API拿到的数据需要在后台解析渲染，这里就是采用的remarkable，参考[官方文档](https://github.com/jonschlinkert/remarkable)很容易就调通了。\r\n```javascript\r\nvar Remarkable = require('remarkable');\r\nvar md = new Remarkable();\r\n\r\nconsole.log(md.render('# Remarkable rulezz!'));\r\n// => <h1>Remarkable rulezz!</h1>\r\n```\r\n\r\n## Highlight.js\r\n\r\n为了能够使代码能够高亮，这里采用了[highlight.js](https://highlightjs.org/)插件进行代码着色。\r\n```html\r\n<link rel=\"stylesheet\" href=\"/path/to/styles/default.css\">\r\n<script src=\"/path/to/highlight.pack.js\"></script>\r\n<script>hljs.initHighlightingOnLoad();</script>\r\n```\r\n有个小坑，主要是内容是异步加载进来的，所以这个js执行不到。解决方案是vue的自定义指令，定义一个v-highlight的指令来使得pre code中的代码高亮。\r\n```javascript\r\n// 在main.js定义自定义指令v-highlight\r\nVue.directive('highlight', function (el) {\r\n  // 当被绑定的元素插入到 DOM 中时……\r\n  let blocks = el.querySelectorAll('pre code');\r\n  blocks.forEach((block) => {\r\n    hljs.highlightBlock(block)\r\n  })\r\n})\r\n```\r\n还有其他的方法，比如让js延迟加载，先加载html再加载js着色，这样的话需要加一个loading的界面进行友好提示（用route的中断器进行属性判断）。\r\n"
  },
  {
    "url": "https://api.github.com/repos/sysdog797/syscoding/issues/1",
    "repository_url": "https://api.github.com/repos/sysdog797/syscoding",
    "labels_url": "https://api.github.com/repos/sysdog797/syscoding/issues/1/labels{/name}",
    "comments_url": "https://api.github.com/repos/sysdog797/syscoding/issues/1/comments",
    "events_url": "https://api.github.com/repos/sysdog797/syscoding/issues/1/events",
    "html_url": "https://github.com/sysdog797/syscoding/issues/1",
    "id": 317604931,
    "node_id": "MDU6SXNzdWUzMTc2MDQ5MzE=",
    "number": 1,
    "title": "开发日记——三天打鱼二十天晒网",
    "user": {
      "login": "sysdog797",
      "id": 21992482,
      "node_id": "MDQ6VXNlcjIxOTkyNDgy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/21992482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sysdog797",
      "html_url": "https://github.com/sysdog797",
      "followers_url": "https://api.github.com/users/sysdog797/followers",
      "following_url": "https://api.github.com/users/sysdog797/following{/other_user}",
      "gists_url": "https://api.github.com/users/sysdog797/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sysdog797/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sysdog797/subscriptions",
      "organizations_url": "https://api.github.com/users/sysdog797/orgs",
      "repos_url": "https://api.github.com/users/sysdog797/repos",
      "events_url": "https://api.github.com/users/sysdog797/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sysdog797/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 965476837,
        "node_id": "MDU6TGFiZWw5NjU0NzY4Mzc=",
        "url": "https://api.github.com/repos/sysdog797/syscoding/labels/Docs",
        "name": "Docs",
        "color": "ffaafa",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-04-25T12:24:09Z",
    "updated_at": "2018-06-15T09:32:45Z",
    "closed_at": null,
    "author_association": "OWNER",
    "body": "## 6.4\r\n618期间，项目不能上线，是时候升级一下博客了（直接推倒进入重建模式...）\r\n\r\n## 5.31\r\nhighlight被官方下架了，取而代之的是highlight.js，其实就是一个东西。发现云服务器装windows系统可以傻瓜式部署代码...\r\n\r\n## 4.25...\r\n\r\n三个月后...加入了一个markdown的解析模块叫[remarkable](https://github.com/jonschlinkert/remarkable)，方便好用，它会给不同的语言设置不同的属性。搭配使用的代码着色模块是[highlight.js](https://highlightjs.org/)，这里有一个坑，因为整个markdown是异步加载进来的，直接用的话相关js不会执行，最后在Vue的main.js里面加了一个自定义指令解决。\r\n\r\n## 1.5\r\n\r\n继上个月好不容易启动工程以来，进度又停滞了两周...（室友两三天用Hexo+Github快速建站已经上线了，还能兼容移动端，找时间试试这个模板）修改确定了最后的UI，虽然还是不太满意...整个网站的流程前后端调通，通过request调用github的API来实现博客内容的管理。调用github API的时候有一个小坑，直接request数据的时候会返回一个403，提示需要一个[User-Agent header](http://developer.github.com/v3/#user-agent-required)，这里需要记得加上。\r\n\r\n## 12.16\r\n\r\n在购买服务器和域名审核过后一个月，终于拖拖拉拉开始启动了网站的搭建...整个网站采用Node、Express和MongoDB进行开发，框架选用的是Vue（强行加一个框架进来），网上各种各样的教程非常多，上手相对简单。\r\n"
  }
]